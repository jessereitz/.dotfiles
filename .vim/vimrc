" vimrc
set nocompatible                " No vi legacy
syntax enable                   " Enable syntax processing
let mapleader = " "
"colorscheme peachpuff           " Set colorscheme
set t_Co=256
set laststatus=2
let &titlestring = expand('%:p')
set title
" Set the title of the Terminal to the currently open file
function! SetTerminalTitle()
    let titleString = expand('%:t')
    if len(titleString) > 0
        let &titlestring = expand('%:~')
        " this is the format iTerm2 expects when setting the window title
        let args = "\033];".&titlestring."\007"
        let cmd = 'silent !echo -e "'.args.'"'
        execute cmd
        redraw!
    endif
endfunction

autocmd BufEnter * call SetTerminalTitle()
set clipboard=unnamed
set wildignore+=*.pyc,*.o,*.obj,*.svn,*.swp,*.class,*.hg,*.DS_Store,*.min.* " Ignore some dumb files

set encoding=utf-8              " Set encoding to UTF-8

set mouse=a                     " Enable mouse support
set shellcmdflag=-ic            " Use interactive shell (so I can get my aliases and whatnot)

"" Whitespace
set nowrap                      " Don't wrap lines
set formatoptions-=t            " do not automatically wrap text when typing
set tabstop=4                   " Set number of visual spaces per TAB
set shiftwidth=4                " Set number of spaces in TAB when editing (real number of spaces)
set expandtab                   " Insert spaces, not tabs
"" UI Config
set number                      " Show line numbers
set showcmd                     " Display incomplete commands
set cursorline                  " Highlight the current line
filetype indent on              " Load filetype-specific indent files
set wildmenu                    " Visual autocomplete for command menu
set lazyredraw                  " Don't redraw screen when it's not necessary
set showmatch                   " Highlight matching [{()}]
set splitright

set backspace=indent,eol,start  " Backspace through everything in insert mode
" Delete key forward delete
inoremap <C-d> <Del>            
noremap <silent> <Leader>- :vertical resize -5<cr>
noremap <silent> <Leader>= :vertical resize +5<cr>

"" Searching
set incsearch                   " Search as characeters are entered
set hlsearch                    " Highlight matches
" Map escape key to search for empty string. Effectively turns off search highlighting
nnoremap <F3> :let @/ = ''<CR>
set ignorecase                  " Searches are case insensitive unless...
set smartcase                   " ... they contain at least one capital letter

"" Folding
set foldenable                  " Enable folding
set foldlevelstart=10           " Open most folds by default
set foldnestmax=10              " 10 nested fold max
" Space open/closes folds
nnoremap <Leader>f za
set foldmethod=indent           " Fold based on indent level

"" Custom Movement Stuff
nnoremap gV `[v`]

"" PLUGINS
" Before initializing vim-plug, set up ackprg to use ag instead of ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"" Install vim-plug if not installed.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Start vim-plug
call plug#begin('~/.vim/plugged')

" Install ack.vim
Plug 'mileszs/ack.vim'

" Install NerdTree
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
let NERDTreeShowHidden=1
map <C-n> :NERDTreeToggle<CR>
autocmd BufWritePost * NERDTreeFocus | execute 'normal R' | wincmd p " Autorefresh nerdtree



" Install Polyglot language pack
Plug 'sheerun/vim-polyglot'

" Install csv.vim
Plug 'chrisbra/csv.vim'

" Plug 'ycm-core/YouCompleteMe'
" Better go-to map
" noremap <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Plug 'vim-syntastic/syntastic'
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
Plug 'dense-analysis/ale'
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%: %code%] %s [%severity%]'
let g:ale_linters = {'python': ['flake8']}
"let g:ale_python_flake8_options = "--inline-quotes=\' --multiline-quotes=\'\'\' --import-order-style=smarkets --ignore=E309,E501,E301,I202 --application-import-names=mackerel,tests"




Plug 'nvie/vim-flake8'

Plug 'ctrlpvim/ctrlp.vim'

Plug 'tpope/vim-fugitive'
" Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'joshdick/onedark.vim'


" End vim-plug
call plug#end()


"" Python Configuration

" python with virtualenv support

python3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  exec(open(activate_this).read(), dict(__file__=activate_this))
EOF

let python_highlight_all=1
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

let g:onedark_color_overrides = {
\ "black": {"gui": "#282c34", "cterm": "235", "cterm16": "0" },
\ "purple": { "gui": "#C678DF", "cterm": "170", "cterm16": "5" }
\}
let g:onedark_terminal_italics=1
let g:airline_theme="onedark"
let g:onedark_termcolors=256

colorscheme onedark
hi Normal guibg=NONE ctermbg=NONE

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = 'Ɇ'
let g:airline_symbols.whitespace = 'Ξ'


let NERDTreeRespectWildIgnore=1

" Ctrl-P settings
let g:ctrlp_show_hidden = 1
"let g:
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

